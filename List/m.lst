
AVRASM ver. 2.1.30  C:\Users\Gabriel NEDELCU\Desktop\p2_bariera automata\soft\List\m.asm Thu Jun 02 13:55:14 2022

C:\Users\Gabriel NEDELCU\Desktop\p2_bariera automata\soft\List\m.asm(1420): warning: Register r3 already defined by the .DEF directive
C:\Users\Gabriel NEDELCU\Desktop\p2_bariera automata\soft\List\m.asm(1421): warning: Register r4 already defined by the .DEF directive
C:\Users\Gabriel NEDELCU\Desktop\p2_bariera automata\soft\List\m.asm(1422): warning: Register r5 already defined by the .DEF directive
C:\Users\Gabriel NEDELCU\Desktop\p2_bariera automata\soft\List\m.asm(1423): warning: Register r6 already defined by the .DEF directive
C:\Users\Gabriel NEDELCU\Desktop\p2_bariera automata\soft\List\m.asm(1424): warning: Register r7 already defined by the .DEF directive
C:\Users\Gabriel NEDELCU\Desktop\p2_bariera automata\soft\List\m.asm(1425): warning: Register r8 already defined by the .DEF directive
C:\Users\Gabriel NEDELCU\Desktop\p2_bariera automata\soft\List\m.asm(1426): warning: Register r9 already defined by the .DEF directive
C:\Users\Gabriel NEDELCU\Desktop\p2_bariera automata\soft\List\m.asm(1427): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.48b 
                 ;(C) Copyright 1998-2022 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _time_elapsed=R3
                 	.DEF _time_elapsed_msb=R4
                 	.DEF _computed_distance=R5
                 	.DEF _computed_distance_msb=R6
                 	.DEF _warning_action=R7
                 	.DEF _warning_action_msb=R8
                 	.DEF _barrier_state=R9
                 	.DEF _barrier_state_msb=R10
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0046 	JMP  __RESET
000002 940c 009f 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 007e 	JMP  _timer1_compa_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00003e 0000
00003f 0000      	.DB  0x0,0x0,0x0,0x0
000040 0032
000041 0000      	.DB  0x32,0x0,0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000042 0008      	.DW  0x08
000043 0003      	.DW  0x03
000044 007c      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000045 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000046 94f8      	CLI
000047 27ee      	CLR  R30
000048 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000049 e0f1      	LDI  R31,1
00004a bff5      	OUT  MCUCR,R31
00004b bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00004c e1f8      	LDI  R31,0x18
00004d 95a8      	WDR
00004e b7a4      	IN   R26,MCUSR
00004f 7fa7      	CBR  R26,8
000050 bfa4      	OUT  MCUSR,R26
000051 93f0 0060 	STS  WDTCSR,R31
000053 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000055 e08d      	LDI  R24,(14-2)+1
000056 e0a2      	LDI  R26,2
000057 27bb      	CLR  R27
                 __CLEAR_REG:
000058 93ed      	ST   X+,R30
000059 958a      	DEC  R24
00005a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005d e0a0      	LDI  R26,LOW(__SRAM_START)
00005e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005f 93ed      	ST   X+,R30
000060 9701      	SBIW R24,1
000061 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000062 e8e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000063 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000064 9185      	LPM  R24,Z+
000065 9195      	LPM  R25,Z+
000066 9700      	SBIW R24,0
000067 f061      	BREQ __GLOBAL_INI_END
000068 91a5      	LPM  R26,Z+
000069 91b5      	LPM  R27,Z+
00006a 9005      	LPM  R0,Z+
00006b 9015      	LPM  R1,Z+
00006c 01bf      	MOVW R22,R30
00006d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006e 9005      	LPM  R0,Z+
00006f 920d      	ST   X+,R0
000070 9701      	SBIW R24,1
000071 f7e1      	BRNE __GLOBAL_INI_LOOP
000072 01fb      	MOVW R30,R22
000073 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000074 e0e0      	LDI  R30,__GPIOR0_INIT
000075 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000076 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000077 bfed      	OUT  SPL,R30
000078 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000079 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007a e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007b e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007c 940c 00d2 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;interrupt [14] void timer1_compa_isr(void)
                 ; 0000 0023 {
                 
                 	.CSEG
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
00007e 920a      	ST   -Y,R0
00007f 921a      	ST   -Y,R1
000080 92fa      	ST   -Y,R15
000081 936a      	ST   -Y,R22
000082 937a      	ST   -Y,R23
000083 938a      	ST   -Y,R24
000084 939a      	ST   -Y,R25
000085 93aa      	ST   -Y,R26
000086 93ba      	ST   -Y,R27
000087 93ea      	ST   -Y,R30
000088 93fa      	ST   -Y,R31
000089 b7ef      	IN   R30,SREG
00008a 93ea      	ST   -Y,R30
                 ; 0000 0024 // Generarea impulsului: 10ms pe high, urmand sa se intoarca pe low
                 ; 0000 0025 sensor_trig = 1;
00008b 9a46      	SBI  0x8,6
                 ; 0000 0026 delay_ms(10);
00008c e0aa      	LDI  R26,LOW(10)
00008d e0b0      	LDI  R27,0
00008e d1cc      	RCALL _delay_ms
                 ; 0000 0027 sensor_trig = 0;
00008f 9846      	CBI  0x8,6
                 ; 0000 0028 
                 ; 0000 0029 // Se reseteaza TIMER1 pentru a putea masura timpul trecut pana la primirea
                 ; 0000 002A // raspunsului de catre senzor
                 ; 0000 002B TCNT1H = 0x00;
000090 d0b6      	RCALL SUBOPT_0x0
                 ; 0000 002C TCNT1L = 0x00;
                 ; 0000 002D }
000091 91e9      	LD   R30,Y+
000092 bfef      	OUT  SREG,R30
000093 91f9      	LD   R31,Y+
000094 91e9      	LD   R30,Y+
000095 91b9      	LD   R27,Y+
000096 91a9      	LD   R26,Y+
000097 9199      	LD   R25,Y+
000098 9189      	LD   R24,Y+
000099 9179      	LD   R23,Y+
00009a 9169      	LD   R22,Y+
00009b 90f9      	LD   R15,Y+
00009c 9019      	LD   R1,Y+
00009d 9009      	LD   R0,Y+
00009e 9518      	RETI
                 ; .FEND
                 ;interrupt [2] void ext_int0_isr(void)
                 ; 0000 0034 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00009f 920a      	ST   -Y,R0
0000a0 921a      	ST   -Y,R1
0000a1 936a      	ST   -Y,R22
0000a2 937a      	ST   -Y,R23
0000a3 938a      	ST   -Y,R24
0000a4 939a      	ST   -Y,R25
0000a5 93aa      	ST   -Y,R26
0000a6 93ba      	ST   -Y,R27
0000a7 93ea      	ST   -Y,R30
0000a8 93fa      	ST   -Y,R31
0000a9 b7ef      	IN   R30,SREG
0000aa 93ea      	ST   -Y,R30
                 ; 0000 0035 // Se calculeaza distanta masurata de senzor
                 ; 0000 0036 // Se aduna valoarea din cei 2 registrii ai timerului pentru a obtine timul trecut
                 ; 0000 0037 // Se inmulteste cu T = 52us, asta fiind perioada de numarare a timerului pentru frecventa de 19.531kHz
                 ; 0000 0038 // La final se inmulteste cu viteza sunetului si imparte la 2 deoarece unda ultrasonica parcurge de doua ori drumul
                 ; 0000 0039 time_elapsed = 52*(TCNT1H << 8| TCNT1L);
0000ab 91e0 0085 	LDS  R30,133
0000ad 2ffe      	MOV  R31,R30
0000ae e0e0      	LDI  R30,0
0000af 01df      	MOVW R26,R30
0000b0 91e0 0084 	LDS  R30,132
0000b2 e0f0      	LDI  R31,0
0000b3 2bea      	OR   R30,R26
0000b4 2bfb      	OR   R31,R27
0000b5 e3a4      	LDI  R26,LOW(52)
0000b6 e0b0      	LDI  R27,HIGH(52)
0000b7 d0af      	RCALL __MULW12
                +
0000b8 2e3e     +MOV R3 , R30
0000b9 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
                 ; 0000 003A computed_distance = time_elapsed*0.017;
0000ba 2766      	CLR  R22
0000bb 2777      	CLR  R23
0000bc d123      	RCALL __CDF1
                +
0000bd e9a6     +LDI R26 , LOW ( 0x3C8B4396 )
0000be e4b3     +LDI R27 , HIGH ( 0x3C8B4396 )
0000bf e88b     +LDI R24 , BYTE3 ( 0x3C8B4396 )
0000c0 e39c     +LDI R25 , BYTE4 ( 0x3C8B4396 )
                 	__GETD2N 0x3C8B4396
0000c1 d14b      	RCALL __MULF12
0000c2 d0e6      	RCALL __CFD1
                +
0000c3 2e5e     +MOV R5 , R30
0000c4 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 003B }
0000c5 91e9      	LD   R30,Y+
0000c6 bfef      	OUT  SREG,R30
0000c7 91f9      	LD   R31,Y+
0000c8 91e9      	LD   R30,Y+
0000c9 91b9      	LD   R27,Y+
0000ca 91a9      	LD   R26,Y+
0000cb 9199      	LD   R25,Y+
0000cc 9189      	LD   R24,Y+
0000cd 9179      	LD   R23,Y+
0000ce 9169      	LD   R22,Y+
0000cf 9019      	LD   R1,Y+
0000d0 9009      	LD   R0,Y+
0000d1 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0040 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0041 // Crystal Oscillator division factor: 1   //20MHz
                 ; 0000 0042 #pragma optsize-
                 ; 0000 0043 CLKPR=0x80;
0000d2 e8e0      	LDI  R30,LOW(128)
0000d3 93e0 0061 	STS  97,R30
                 ; 0000 0044 CLKPR=0x00;
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 93e0 0061 	STS  97,R30
                 ; 0000 0045 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0046 #pragma optsize+
                 ; 0000 0047 #endif
                 ; 0000 0048 
                 ; 0000 0049 // Input/Output Ports initialization
                 ; 0000 004A // Port A initialization
                 ; 0000 004B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 004C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 004D PORTA=0x00;
0000d8 b9e2      	OUT  0x2,R30
                 ; 0000 004E DDRA=0x00;
0000d9 b9e1      	OUT  0x1,R30
                 ; 0000 004F 
                 ; 0000 0050 // Port B initialization
                 ; 0000 0051 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=Out
                 ; 0000 0052 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=0
                 ; 0000 0053 PORTB=0x00;
0000da b9e5      	OUT  0x5,R30
                 ; 0000 0054 DDRB=0xC0;    //PB6 si PB7 iesiri
0000db ece0      	LDI  R30,LOW(192)
0000dc b9e4      	OUT  0x4,R30
                 ; 0000 0055 
                 ; 0000 0056 // Port C initialization
                 ; 0000 0057 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0058 // State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 0059 PORTC=0x00;
0000dd e0e0      	LDI  R30,LOW(0)
0000de b9e8      	OUT  0x8,R30
                 ; 0000 005A DDRC=0x40;    //activare iesire pe pinul PC6 pentrut trigger-ul senzorului ultrasonic
0000df e4e0      	LDI  R30,LOW(64)
0000e0 b9e7      	OUT  0x7,R30
                 ; 0000 005B 
                 ; 0000 005C // Port D initialization
                 ; 0000 005D // Func7=In Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 005E // State7=T State6=0 State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 005F PORTD=0x00;
0000e1 e0e0      	LDI  R30,LOW(0)
0000e2 b9eb      	OUT  0xB,R30
                 ; 0000 0060 DDRD=0xC0;     //LED conectat pe pinul D6, iesire difuzor pe D7
0000e3 ece0      	LDI  R30,LOW(192)
0000e4 b9ea      	OUT  0xA,R30
                 ; 0000 0061 
                 ; 0000 0062 // Timer/Counter 0 initialization
                 ; 0000 0063 // Clock source: System Clock
                 ; 0000 0064 // Clock value: Timer 0 Stopped
                 ; 0000 0065 // Mode: Normal top=0xFF
                 ; 0000 0066 // OC0A output: Disconnected
                 ; 0000 0067 // OC0B output: Disconnected
                 ; 0000 0068 TCCR0A=0x00;
0000e5 e0e0      	LDI  R30,LOW(0)
0000e6 bde4      	OUT  0x24,R30
                 ; 0000 0069 TCCR0B=0x00;
0000e7 bde5      	OUT  0x25,R30
                 ; 0000 006A TCNT0=0x00;
0000e8 bde6      	OUT  0x26,R30
                 ; 0000 006B OCR0A=0x00;
0000e9 bde7      	OUT  0x27,R30
                 ; 0000 006C OCR0B=0x00;
0000ea bde8      	OUT  0x28,R30
                 ; 0000 006D 
                 ; 0000 006E // Timer/Counter 1 initialization
                 ; 0000 006F // Clock source: System Clock
                 ; 0000 0070 // Clock value: 19.531 kHz  // Fclk/1024
                 ; 0000 0071 // Mode: CTC top=OCR1A
                 ; 0000 0072 // OC1A output: Discon.
                 ; 0000 0073 // OC1B output: Discon.
                 ; 0000 0074 // Noise Canceler: Off
                 ; 0000 0075 // Input Capture on Falling Edge
                 ; 0000 0076 // Timer1 Overflow Interrupt: Off
                 ; 0000 0077 // Input Capture Interrupt: Off
                 ; 0000 0078 // Compare A Match Interrupt: On
                 ; 0000 0079 // Compare B Match Interrupt: Off
                 ; 0000 007A TCCR1A=0x00;
0000eb 93e0 0080 	STS  128,R30
                 ; 0000 007B TCCR1B=0x0D;
0000ed e0ed      	LDI  R30,LOW(13)
0000ee 93e0 0081 	STS  129,R30
                 ; 0000 007C TCNT1H=0x00;
0000f0 d056      	RCALL SUBOPT_0x0
                 ; 0000 007D TCNT1L=0x00;
                 ; 0000 007E ICR1H=0x00;
0000f1 e0e0      	LDI  R30,LOW(0)
0000f2 93e0 0087 	STS  135,R30
                 ; 0000 007F ICR1L=0x00;
0000f4 93e0 0086 	STS  134,R30
                 ; 0000 0080 OCR1AH=0x20;     //configurare timer1 cu intrerupere la 0.42 secunde  8000/19530
0000f6 e2e0      	LDI  R30,LOW(32)
0000f7 93e0 0089 	STS  137,R30
                 ; 0000 0081 OCR1AL=0x10;
0000f9 e1e0      	LDI  R30,LOW(16)
0000fa 93e0 0088 	STS  136,R30
                 ; 0000 0082 OCR1BH=0x00;
0000fc e0e0      	LDI  R30,LOW(0)
0000fd 93e0 008b 	STS  139,R30
                 ; 0000 0083 OCR1BL=0x00;
0000ff 93e0 008a 	STS  138,R30
                 ; 0000 0084 
                 ; 0000 0085 // External Interrupt(s) initialization
                 ; 0000 0086 // INT0: On
                 ; 0000 0087 // INT0 Mode: Falling Edge
                 ; 0000 0088 // INT1:  Off
                 ; 0000 0089 // INT1  Off
                 ; 0000 008A // INT2: Off
                 ; 0000 008B // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 008C // Interrupt on any change on pins PCINT8-15: Off
                 ; 0000 008D // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 008E // Interrupt on any change on pins PCINT24-31: Off
                 ; 0000 008F EICRA=0x02;
000101 e0e2      	LDI  R30,LOW(2)
000102 93e0 0069 	STS  105,R30
                 ; 0000 0090 EIMSK=0x01;
000104 e0e1      	LDI  R30,LOW(1)
000105 bbed      	OUT  0x1D,R30
                 ; 0000 0091 EIFR=0x01;
000106 bbec      	OUT  0x1C,R30
                 ; 0000 0092 PCICR=0x00;
000107 e0e0      	LDI  R30,LOW(0)
000108 93e0 0068 	STS  104,R30
                 ; 0000 0093 
                 ; 0000 0094 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0095 TIMSK0=0x00;
00010a 93e0 006e 	STS  110,R30
                 ; 0000 0096 
                 ; 0000 0097 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0098 TIMSK1=0x02;
00010c e0e2      	LDI  R30,LOW(2)
00010d 93e0 006f 	STS  111,R30
                 ; 0000 0099 
                 ; 0000 009A // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 009B TIMSK2=0x00;
00010f e0e0      	LDI  R30,LOW(0)
000110 93e0 0070 	STS  112,R30
                 ; 0000 009C 
                 ; 0000 009D // USART0 initialization
                 ; 0000 009E // USART0 disabled
                 ; 0000 009F UCSR0B=0x00;
000112 93e0 00c1 	STS  193,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // USART1 initialization
                 ; 0000 00A2 // USART1 disabled
                 ; 0000 00A3 UCSR1B=0x00;
000114 93e0 00c9 	STS  201,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // Analog Comparator initialization
                 ; 0000 00A6 // Analog Comparator: Off
                 ; 0000 00A7 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00A8 ACSR=0x80;
000116 e8e0      	LDI  R30,LOW(128)
000117 bfe0      	OUT  0x30,R30
                 ; 0000 00A9 ADCSRB=0x00;
000118 e0e0      	LDI  R30,LOW(0)
000119 93e0 007b 	STS  123,R30
                 ; 0000 00AA DIDR1=0x00;
00011b 93e0 007f 	STS  127,R30
                 ; 0000 00AB 
                 ; 0000 00AC // ADC initialization
                 ; 0000 00AD // ADC disabled
                 ; 0000 00AE ADCSRA=0x00;
00011d 93e0 007a 	STS  122,R30
                 ; 0000 00AF 
                 ; 0000 00B0 // SPI initialization
                 ; 0000 00B1 // SPI disabled
                 ; 0000 00B2 SPCR=0x00;
00011f bdec      	OUT  0x2C,R30
                 ; 0000 00B3 
                 ; 0000 00B4 // TWI initialization
                 ; 0000 00B5 // TWI disabled
                 ; 0000 00B6 TWCR=0x00;
000120 93e0 00bc 	STS  188,R30
                 ; 0000 00B7 
                 ; 0000 00B8 // Global enable interrupts
                 ; 0000 00B9 #asm("sei")
000122 9478      	SEI
                 ; 0000 00BA 
                 ; 0000 00BB while (1)
                 _0x7:
                 ; 0000 00BC {
                 ; 0000 00BD // Daca s-a atins distanta minima pentru a actiona bariera
                 ; 0000 00BE // si aceasta este jos se ridica bariera
                 ; 0000 00BF if (computed_distance < warning_action && barrier_state == 0) {
                +
000123 1457     +CP R5 , R7
000124 0468     +CPC R6 , R8
                 	__CPWRR 5,6,7,8
000125 f424      	BRGE _0xB
000126 2400      	CLR  R0
000127 1409      	CP   R0,R9
000128 040a      	CPC  R0,R10
000129 f009      	BREQ _0xC
                 _0xB:
00012a c008      	RJMP _0xA
                 _0xC:
                 ; 0000 00C0 // Aprindem led-ul
                 ; 0000 00C1 led = 1;
00012b 9a5e      	SBI  0xB,6
                 ; 0000 00C2 // Modificam starea interna a barierei
                 ; 0000 00C3 barrier_state = 1;
00012c e0e1      	LDI  R30,LOW(1)
00012d e0f0      	LDI  R31,HIGH(1)
                +
00012e 2e9e     +MOV R9 , R30
00012f 2eaf     +MOV R10 , R31
                 	__PUTW1R 9,10
                 ; 0000 00C4 // Trimitem semnal catre driver-ul de motor pentru a-l
                 ; 0000 00C5 // putea actiona
                 ; 0000 00C6 motorA = 1;
000130 9a2e      	SBI  0x5,6
                 ; 0000 00C7 motorB = 0;
000131 982f      	CBI  0x5,7
                 ; 0000 00C8 // Il actionam timp de 10ms
                 ; 0000 00C9 delay_ms(10);
000132 d01a      	RCALL SUBOPT_0x1
                 ; 0000 00CA // Oprim rotirea motorului
                 ; 0000 00CB motorA = 0;
                 ; 0000 00CC motorB = 0;
                 ; 0000 00CD }
                 ; 0000 00CE 
                 ; 0000 00CF // Daca distanta minima pentru a actiona bariera nu mai este
                 ; 0000 00D0 // indeplinita (nu mai exista un obstacol in fata senzorului)
                 ; 0000 00D1 // si bariera este ridicata, coboram bariera
                 ; 0000 00D2 if (computed_distance > warning_action && barrier_state == 1) {
                 _0xA:
                +
000133 1475     +CP R7 , R5
000134 0486     +CPC R8 , R6
                 	__CPWRR 7,8,5,6
000135 f42c      	BRGE _0x18
000136 e0e1      	LDI  R30,LOW(1)
000137 e0f0      	LDI  R31,HIGH(1)
000138 15e9      	CP   R30,R9
000139 05fa      	CPC  R31,R10
00013a f009      	BREQ _0x19
                 _0x18:
00013b c009      	RJMP _0x17
                 _0x19:
                 ; 0000 00D3 // Stingem led-ul
                 ; 0000 00D4 led = 0;
00013c 985e      	CBI  0xB,6
                 ; 0000 00D5 // Doar daca bariera este ridicata
                 ; 0000 00D6 // pentru a evita "coborarea" infinita a barierei
                 ; 0000 00D7 if (barrier_state) {
00013d 2c09      	MOV  R0,R9
00013e 280a      	OR   R0,R10
00013f f029      	BREQ _0x1C
                 ; 0000 00D8 // Modificam starea interna a barierei
                 ; 0000 00D9 barrier_state = 0;
000140 2499      	CLR  R9
000141 24aa      	CLR  R10
                 ; 0000 00DA // Trimitem semnal catre driver-ul de motor pentru a-l
                 ; 0000 00DB // putea actiona
                 ; 0000 00DC motorA = 0;
000142 982e      	CBI  0x5,6
                 ; 0000 00DD motorB = 1;
000143 9a2f      	SBI  0x5,7
                 ; 0000 00DE // Il actionam timp de 10ms
                 ; 0000 00DF delay_ms(10);
000144 d008      	RCALL SUBOPT_0x1
                 ; 0000 00E0 // Oprim rotirea motorulu
                 ; 0000 00E1 motorA = 0;
                 ; 0000 00E2 motorB = 0;
                 ; 0000 00E3 }
                 ; 0000 00E4 }
                 _0x1C:
                 ; 0000 00E5 }
                 _0x17:
000145 cfdd      	RJMP _0x7
                 ; 0000 00E6 }
                 _0x25:
000146 cfff      	RJMP _0x25
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000147 e0e0      	LDI  R30,LOW(0)
000148 93e0 0085 	STS  133,R30
00014a 93e0 0084 	STS  132,R30
00014c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
00014d e0aa      	LDI  R26,LOW(10)
00014e e0b0      	LDI  R27,0
00014f d10b      	RCALL _delay_ms
000150 982e      	CBI  0x5,6
000151 982f      	CBI  0x5,7
000152 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __ANEGW1:
000153 95f1      	NEG  R31
000154 95e1      	NEG  R30
000155 40f0      	SBCI R31,0
000156 9508      	RET
                 
                 __ANEGD1:
000157 95f0      	COM  R31
000158 9560      	COM  R22
000159 9570      	COM  R23
00015a 95e1      	NEG  R30
00015b 4fff      	SBCI R31,-1
00015c 4f6f      	SBCI R22,-1
00015d 4f7f      	SBCI R23,-1
00015e 9508      	RET
                 
                 __MULW12U:
00015f 9ffa      	MUL  R31,R26
000160 2df0      	MOV  R31,R0
000161 9feb      	MUL  R30,R27
000162 0df0      	ADD  R31,R0
000163 9fea      	MUL  R30,R26
000164 2de0      	MOV  R30,R0
000165 0df1      	ADD  R31,R1
000166 9508      	RET
                 
                 __MULW12:
000167 d004      	RCALL __CHKSIGNW
000168 dff6      	RCALL __MULW12U
000169 f40e      	BRTC __MULW121
00016a dfe8      	RCALL __ANEGW1
                 __MULW121:
00016b 9508      	RET
                 
                 __CHKSIGNW:
00016c 94e8      	CLT
00016d fff7      	SBRS R31,7
00016e c002      	RJMP __CHKSW1
00016f dfe3      	RCALL __ANEGW1
000170 9468      	SET
                 __CHKSW1:
000171 ffb7      	SBRS R27,7
000172 c006      	RJMP __CHKSW2
000173 95b1      	NEG  R27
000174 95a1      	NEG  R26
000175 40b0      	SBCI R27,0
000176 f800      	BLD  R0,0
000177 9403      	INC  R0
000178 fa00      	BST  R0,0
                 __CHKSW2:
000179 9508      	RET
                 
                 __ROUND_REPACK:
00017a 2355      	TST  R21
00017b f442      	BRPL __REPACK
00017c 3850      	CPI  R21,0x80
00017d f411      	BRNE __ROUND_REPACK0
00017e ffe0      	SBRS R30,0
00017f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000180 9631      	ADIW R30,1
000181 1f69      	ADC  R22,R25
000182 1f79      	ADC  R23,R25
000183 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000184 e850      	LDI  R21,0x80
000185 2757      	EOR  R21,R23
000186 f411      	BRNE __REPACK0
000187 935f      	PUSH R21
000188 c073      	RJMP __ZERORES
                 __REPACK0:
000189 3f5f      	CPI  R21,0xFF
00018a f031      	BREQ __REPACK1
00018b 0f66      	LSL  R22
00018c 0c00      	LSL  R0
00018d 9557      	ROR  R21
00018e 9567      	ROR  R22
00018f 2f75      	MOV  R23,R21
000190 9508      	RET
                 __REPACK1:
000191 935f      	PUSH R21
000192 2000      	TST  R0
000193 f00a      	BRMI __REPACK2
000194 c072      	RJMP __MAXRES
                 __REPACK2:
000195 c06b      	RJMP __MINRES
                 
                 __UNPACK:
000196 e850      	LDI  R21,0x80
000197 2e19      	MOV  R1,R25
000198 2215      	AND  R1,R21
000199 0f88      	LSL  R24
00019a 1f99      	ROL  R25
00019b 2795      	EOR  R25,R21
00019c 0f55      	LSL  R21
00019d 9587      	ROR  R24
                 
                 __UNPACK1:
00019e e850      	LDI  R21,0x80
00019f 2e07      	MOV  R0,R23
0001a0 2205      	AND  R0,R21
0001a1 0f66      	LSL  R22
0001a2 1f77      	ROL  R23
0001a3 2775      	EOR  R23,R21
0001a4 0f55      	LSL  R21
0001a5 9567      	ROR  R22
0001a6 9508      	RET
                 
                 __CFD1U:
0001a7 9468      	SET
0001a8 c001      	RJMP __CFD1U0
                 __CFD1:
0001a9 94e8      	CLT
                 __CFD1U0:
0001aa 935f      	PUSH R21
0001ab dff2      	RCALL __UNPACK1
0001ac 3870      	CPI  R23,0x80
0001ad f018      	BRLO __CFD10
0001ae 3f7f      	CPI  R23,0xFF
0001af f408      	BRCC __CFD10
0001b0 c04b      	RJMP __ZERORES
                 __CFD10:
0001b1 e156      	LDI  R21,22
0001b2 1b57      	SUB  R21,R23
0001b3 f4aa      	BRPL __CFD11
0001b4 9551      	NEG  R21
0001b5 3058      	CPI  R21,8
0001b6 f40e      	BRTC __CFD19
0001b7 3059      	CPI  R21,9
                 __CFD19:
0001b8 f030      	BRLO __CFD17
0001b9 efef      	SER  R30
0001ba efff      	SER  R31
0001bb ef6f      	SER  R22
0001bc e77f      	LDI  R23,0x7F
0001bd f977      	BLD  R23,7
0001be c01a      	RJMP __CFD15
                 __CFD17:
0001bf 2777      	CLR  R23
0001c0 2355      	TST  R21
0001c1 f0b9      	BREQ __CFD15
                 __CFD18:
0001c2 0fee      	LSL  R30
0001c3 1fff      	ROL  R31
0001c4 1f66      	ROL  R22
0001c5 1f77      	ROL  R23
0001c6 955a      	DEC  R21
0001c7 f7d1      	BRNE __CFD18
0001c8 c010      	RJMP __CFD15
                 __CFD11:
0001c9 2777      	CLR  R23
                 __CFD12:
0001ca 3058      	CPI  R21,8
0001cb f028      	BRLO __CFD13
0001cc 2fef      	MOV  R30,R31
0001cd 2ff6      	MOV  R31,R22
0001ce 2f67      	MOV  R22,R23
0001cf 5058      	SUBI R21,8
0001d0 cff9      	RJMP __CFD12
                 __CFD13:
0001d1 2355      	TST  R21
0001d2 f031      	BREQ __CFD15
                 __CFD14:
0001d3 9576      	LSR  R23
0001d4 9567      	ROR  R22
0001d5 95f7      	ROR  R31
0001d6 95e7      	ROR  R30
0001d7 955a      	DEC  R21
0001d8 f7d1      	BRNE __CFD14
                 __CFD15:
0001d9 2000      	TST  R0
0001da f40a      	BRPL __CFD16
0001db df7b      	RCALL __ANEGD1
                 __CFD16:
0001dc 915f      	POP  R21
0001dd 9508      	RET
                 
                 __CDF1U:
0001de 9468      	SET
0001df c001      	RJMP __CDF1U0
                 __CDF1:
0001e0 94e8      	CLT
                 __CDF1U0:
0001e1 9730      	SBIW R30,0
0001e2 4060      	SBCI R22,0
0001e3 4070      	SBCI R23,0
0001e4 f0b1      	BREQ __CDF10
0001e5 2400      	CLR  R0
0001e6 f026      	BRTS __CDF11
0001e7 2377      	TST  R23
0001e8 f412      	BRPL __CDF11
0001e9 9400      	COM  R0
0001ea df6c      	RCALL __ANEGD1
                 __CDF11:
0001eb 2e17      	MOV  R1,R23
0001ec e17e      	LDI  R23,30
0001ed 2011      	TST  R1
                 __CDF12:
0001ee f032      	BRMI __CDF13
0001ef 957a      	DEC  R23
0001f0 0fee      	LSL  R30
0001f1 1fff      	ROL  R31
0001f2 1f66      	ROL  R22
0001f3 1c11      	ROL  R1
0001f4 cff9      	RJMP __CDF12
                 __CDF13:
0001f5 2fef      	MOV  R30,R31
0001f6 2ff6      	MOV  R31,R22
0001f7 2d61      	MOV  R22,R1
0001f8 935f      	PUSH R21
0001f9 df8a      	RCALL __REPACK
0001fa 915f      	POP  R21
                 __CDF10:
0001fb 9508      	RET
                 
                 __ZERORES:
0001fc 27ee      	CLR  R30
0001fd 27ff      	CLR  R31
0001fe 01bf      	MOVW R22,R30
0001ff 915f      	POP  R21
000200 9508      	RET
                 
                 __MINRES:
000201 efef      	SER  R30
000202 efff      	SER  R31
000203 e76f      	LDI  R22,0x7F
000204 ef7f      	SER  R23
000205 915f      	POP  R21
000206 9508      	RET
                 
                 __MAXRES:
000207 efef      	SER  R30
000208 efff      	SER  R31
000209 e76f      	LDI  R22,0x7F
00020a e77f      	LDI  R23,0x7F
00020b 915f      	POP  R21
00020c 9508      	RET
                 
                 __MULF12:
00020d 935f      	PUSH R21
00020e df87      	RCALL __UNPACK
00020f 3870      	CPI  R23,0x80
000210 f359      	BREQ __ZERORES
000211 3890      	CPI  R25,0x80
000212 f349      	BREQ __ZERORES
000213 2401      	EOR  R0,R1
000214 9408      	SEC
000215 1f79      	ADC  R23,R25
000216 f423      	BRVC __MULF124
000217 f324      	BRLT __ZERORES
                 __MULF125:
000218 2000      	TST  R0
000219 f33a      	BRMI __MINRES
00021a cfec      	RJMP __MAXRES
                 __MULF124:
00021b 920f      	PUSH R0
00021c 931f      	PUSH R17
00021d 932f      	PUSH R18
00021e 933f      	PUSH R19
00021f 934f      	PUSH R20
000220 2711      	CLR  R17
000221 2722      	CLR  R18
000222 2799      	CLR  R25
000223 9f68      	MUL  R22,R24
000224 01a0      	MOVW R20,R0
000225 9f8f      	MUL  R24,R31
000226 2d30      	MOV  R19,R0
000227 0d41      	ADD  R20,R1
000228 1f59      	ADC  R21,R25
000229 9f6b      	MUL  R22,R27
00022a 0d30      	ADD  R19,R0
00022b 1d41      	ADC  R20,R1
00022c 1f59      	ADC  R21,R25
00022d 9f8e      	MUL  R24,R30
00022e d027      	RCALL __MULF126
00022f 9fbf      	MUL  R27,R31
000230 d025      	RCALL __MULF126
000231 9f6a      	MUL  R22,R26
000232 d023      	RCALL __MULF126
000233 9fbe      	MUL  R27,R30
000234 d01d      	RCALL __MULF127
000235 9faf      	MUL  R26,R31
000236 d01b      	RCALL __MULF127
000237 9fae      	MUL  R26,R30
000238 0d11      	ADD  R17,R1
000239 1f29      	ADC  R18,R25
00023a 1f39      	ADC  R19,R25
00023b 1f49      	ADC  R20,R25
00023c 1f59      	ADC  R21,R25
00023d 2fe3      	MOV  R30,R19
00023e 2ff4      	MOV  R31,R20
00023f 2f65      	MOV  R22,R21
000240 2f52      	MOV  R21,R18
000241 914f      	POP  R20
000242 913f      	POP  R19
000243 912f      	POP  R18
000244 911f      	POP  R17
000245 900f      	POP  R0
000246 2366      	TST  R22
000247 f02a      	BRMI __MULF122
000248 0f55      	LSL  R21
000249 1fee      	ROL  R30
00024a 1fff      	ROL  R31
00024b 1f66      	ROL  R22
00024c c002      	RJMP __MULF123
                 __MULF122:
00024d 9573      	INC  R23
00024e f24b      	BRVS __MULF125
                 __MULF123:
00024f df2a      	RCALL __ROUND_REPACK
000250 915f      	POP  R21
000251 9508      	RET
                 
                 __MULF127:
000252 0d10      	ADD  R17,R0
000253 1d21      	ADC  R18,R1
000254 1f39      	ADC  R19,R25
000255 c002      	RJMP __MULF128
                 __MULF126:
000256 0d20      	ADD  R18,R0
000257 1d31      	ADC  R19,R1
                 __MULF128:
000258 1f49      	ADC  R20,R25
000259 1f59      	ADC  R21,R25
00025a 9508      	RET
                 
                 _delay_ms:
00025b 9610      	adiw r26,0
00025c f039      	breq __delay_ms1
                 __delay_ms0:
00025d 95a8      	wdr
                +
00025e e888     +LDI R24 , LOW ( 0x1388 )
00025f e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
000260 9701     +SBIW R24 , 1
000261 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
000262 9711      	sbiw r26,1
000263 f7c9      	brne __delay_ms0
                 __delay_ms1:
000264 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  35 r1 :  18 r2 :   0 r3 :   1 r4 :   1 r5 :   3 r6 :   3 r7 :   2 
r8 :   2 r9 :   5 r10:   5 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   5 r18:   7 r19:   8 r20:   8 r21:  44 r22:  32 r23:  33 
r24:  19 r25:  25 r26:  24 r27:  19 r28:   1 r29:   1 r30: 124 r31:  43 
x  :   3 y  :  46 z  :   7 
Registers used: 29 out of 35 (82.9%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  15 add   :   7 
adiw  :   2 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  11 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   1 brmi  :   4 brne  :   9 brpl  :   4 brsh  :   0 brtc  :   2 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :   0 
cbi   :   6 cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  15 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 
cp    :   4 cpc   :   4 cpi   :   9 cpse  :   0 dec   :   4 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   2 jmp   :  32 ld    :  23 ldd   :   0 ldi   :  63 
lds   :   2 lpm   :   7 lsl   :   9 lsr   :   1 mov   :  25 movw  :   6 
mul   :  12 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   3 
ori   :   0 out   :  26 pop   :  11 push  :  10 rcall :  25 ret   :  17 
reti  :   2 rjmp  :  21 rol   :  11 ror   :   7 sbc   :   0 sbci  :   7 
sbi   :   4 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   0 
sbrs  :   3 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  26 std   :   0 sts   :  25 sub   :   1 subi  :   1 swap  :   0 
tst   :   9 wdr   :   2 
Instructions used: 66 out of 116 (56.9%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004ca   1210     16   1226   16384   7.5%
[.dseg] 0x000100 0x000200      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
